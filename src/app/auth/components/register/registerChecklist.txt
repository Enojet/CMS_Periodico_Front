CHECKLIST register
ARCHIVOS QUE TRABAJAREMOS



DATOS A NECESITAR BACK:
users.model.js
    username/email
    role: writer, editor
    password

1 HACER FORMULARIO 

****register.component.html****
2 Declaramos <form> para utilizar formulario clásico
3 Copiamos otro formulario de otro proyecto para reutilizarlo.
4 Miramos en el back el modelo:
    DATOS A NECESITAR BACK:
        users.model.js
            username/email
            role: writer, editor
            password
5 Declarar en app component HTML: <app-register></app-register>
6 Importamos en app component ts: import { RegisterComponent } from './register.component';
7 (ngSubmit) para gestionar formularios con register.component.ts
11 ngModel para enlazar los campos del formulario con la propiedad userForm de register.component.ts (username, role, password)
12 FIN



****register.component.ts****
1 Importamos FormsModule para utilizar formulario clásico
8 Declaramos metodo onSubmit() para enviar los datos al backend
10 Creamos lista public userForm para almacenar los datos del formulario y ponemos datos vacios que son strings



2 ENVIAR FORMULARIO Y REGISTRAR

2.1 VALIDACION
****register.component.html****

****register.component.ts****
1 Creamos 1 validación   

handleRegisterForm() {
    // 1 VALIDACION
    const userFormValues = Object.values(this.userForm)

  if(userFormValues.includes('')) {
    alert('Todos los campos son obligatorios')
    return
  }
}

3 ENVIAR DATOS AL BACKEND CON FORMULARIO CON SERVICIO

--3.1 Generamos servicio dentro del modulo carpeta service de auth terminal->ng generate service auth.service
3.2 app.config.ts en providers declaramos providehttpCliente para configurar acceso con el servidor
3.3 auth.service.ts:
    inyectamos httpclient, configuramos el endpoint de register y devolvemos el resultado
    // Clase 'AuthService', que gestiona la autenticación
    export class AuthService {
    // Usamos 'inject' para obtener una instancia del servicio HttpClient
    private http: HttpClient = inject(HttpClient)

    // Método que maneja el registro de un usuario
    register(userForm: any) {
        // Realiza una solicitud HTTP POST al backend para registrar al usuario
        // Envía los datos del formulario 'userForm' al endpoint '/register' del servidor
        // OJO!!! PDTE REVISAR RUTA Y Nº PUERTO
        return this.http.post("http://localhost:3000/register", userForm)
    
  }
  constructor() { }

  4 ENVIAR DATOS AL BACKEND CON FORMULARIO CON SERVICIO
  4.1 register.component.ts inyectamos AuthService(auth.service.ts) para poder utilizar el metodo register





















<!--HTML -->


